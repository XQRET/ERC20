// updated by chh
// our total supply will change to 4billion
pragma solidity ^0.4.8;
contract Token{
    // token amount that will default to public variables generated a getter function inteface which called totalSupply()
    uint256 public totalSupply;

    // get the number of account _owner which has token 
    function balanceOf(address _owner) constant returns (uint256 balance);

    // from msg.sender to send the _value of number token to account _to
    function transfer(address _to, uint256 _value) returns (bool success);

    // from account _from to send the _value of number token to _to which must be used with approve method and the method of caller is not be msg.sender
    function transferFrom(address _from, address _to, uint256 _value) returns   
    (bool success);

    // msg.sender account that set account _spender can transfer how many token from sending account(msg.sender) number of _value token
    function approve(address _spender, uint256 _value) returns (bool success);

    // get account _sender how many it can transfer from account _onwer the number of the token
    function allowance(address _owner, address _spender) constant returns 
    (uint256 remaining);

    // trigger event when transfer occurs
    event Transfer(address indexed _from, address indexed _to, uint256 _value);

    // when the function approve(address _spender, uint256 _value) executed successfully that must trigger event
    event Approval(address indexed _owner, address indexed _spender, uint256 
    _value);
}

contract StandardToken is Token {
    function transfer(address _to, uint256 _value) returns (bool success) {
        // the default total supply will not exceed the maximum(2^256-1)
        // as the time go there will be more new token generated,you can use the following to avoid overflow exception
        //require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);
        require(balances[msg.sender] >= _value);
        balances[msg.sender] -= _value;// from the message sender account to minus the _value of number token
        balances[_to] += _value;// increase the number of _value token to receiving account
        Transfer(msg.sender, _to, _value);// trigger the event
        return true;
    }


    function transferFrom(address _from, address _to, uint256 _value) returns 
    (bool success) {
        //require(balances[_from] >= _value && allowed[_from][msg.sender] >= 
        // _value && balances[_to] + _value > balances[_to]);
        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);
        balances[_to] += _value;// receiving account increase _value number of token
        balances[_from] -= _value; // account _from minus the number of _value token
        allowed[_from][msg.sender] -= _value;// the msg.sender which can transfer must be reduce
        Transfer(_from, _to, _value);// trigger the function of transfer
        return true;
    }
    function balanceOf(address _owner) constant returns (uint256 balance) {
        return balances[_owner];
    }


    function approve(address _spender, uint256 _value) returns (bool success)   
    {
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        return true;
    }


    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
        return allowed[_owner][_spender];// the number of token which the _spender can transit from _owner
    }
    mapping (address => uint256) balances;
    mapping (address => mapping (address => uint256)) allowed;
}

contract RECToken is StandardToken { 

    /* Public variables of the token */
    string public name;                   // token name, eg Simon Bucks
    uint8 public decimals;               // most of the decimal digitsï¼ŒHow many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 RET = 980 base units. It's like comparing 1 wei to 1 ether.
    string public symbol;               // token short name: eg SBX
    string public version = 'R0.1';    // version

    function RECToken(uint256 _initialAmount, string _tokenName, uint8 _decimalUnits, string _tokenSymbol) {
        balances[msg.sender] = _initialAmount; // the initial token number to give the msg.sender
        totalSupply = _initialAmount;         // set the initial total amount
        name = _tokenName;                   // token name
        decimals = _decimalUnits;           // most of the decimal digits
        symbol = _tokenSymbol;             // token short name
    }

    /* Approves and then calls the receiving contract */
    // the function was deprected
    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {
        allowed[msg.sender][_spender] = _value;
        Approval(msg.sender, _spender, _value);
        //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.
        //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)
        //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.
        require(_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData));
        return true;
    }

}
